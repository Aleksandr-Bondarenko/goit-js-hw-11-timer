{"version":3,"sources":["app.js"],"names":["CountdownTimer","selector","targetDate","time","Date","secs","Math","floor","mins","hours","days","outputFieldsArr","document","querySelector","children","map","el","textContent","insertAdjacentHTML","setInterval","timer","bind","createTimer","runTimer"],"mappings":";AA+FA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,WAAA,MAAA,EAAA,cAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA/FMA,IAAAA,EAAAA,WACQC,SAAAA,EAAAA,EAAUC,GAAY,EAAA,KAAA,GAC3BD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EA4FtB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAzFE,MAAA,WACQC,IAAAA,EAAO,KAAKD,WAAa,IAAIE,KAE7BC,EAAOC,KAAKC,MAAOJ,EAAQ,IAAc,KACzCK,EAAOF,KAAKC,MAAOJ,EAAQ,KAAoB,KAC/CM,EAAQH,KAAKC,MAAOJ,EAAQ,MAAyB,MACrDO,EAAOJ,KAAKC,MAAMJ,EAAQ,OAG1BQ,EAAkB,EADLC,SAASC,cAAc,KAAKZ,UAAUa,UACjBC,IAAI,SAACC,GACpCA,OAAAA,EAAGH,cAAc,YAG1BF,EAAgB,GAAGM,YAAcP,EAAO,GAASA,IAAAA,OAAAA,GAASA,EAC1DC,EAAgB,GAAGM,YAAcR,EAAQ,GAASA,IAAAA,OAAAA,GAAUA,EAC5DE,EAAgB,GAAGM,YAAcT,EAAO,GAASA,IAAAA,OAAAA,GAASA,EAC1DG,EAAgB,GAAGM,YAAcZ,EAAO,GAASA,IAAAA,OAAAA,GAASA,IAyE9D,CAAA,IAAA,WA5DE,MAAA,WACkBO,SAASC,cAAc,KAAKZ,UACpCiB,mBACN,cACA,gEAGFC,YAAY,KAAKC,MAAMC,KAAK,MAAO,SAqDvC,EA/FMrB,GA8CAsB,EAAc,IAAItB,EAAe,WAAY,IAAII,KAAK,iBAE5DkB,EAAYC","file":"app.91f6dd12.js","sourceRoot":"..\\src","sourcesContent":["class CountdownTimer {\r\n  constructor(selector, targetDate) {\r\n    this.selector = selector;\r\n    this.targetDate = targetDate;\r\n  }\r\n\r\n  timer() {\r\n    const time = this.targetDate - new Date();\r\n\r\n    const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n    const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n    const hours = Math.floor((time % (60 * 60 * 24 * 1000)) / (1000 * 60 * 60));\r\n    const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n    const timerField = document.querySelector(this.selector).children;\r\n    const outputFieldsArr = [...timerField].map((el) => {\r\n      return el.querySelector(\".value\");\r\n    });\r\n\r\n    outputFieldsArr[0].textContent = days < 10 ? `0${days}` : days;\r\n    outputFieldsArr[1].textContent = hours < 10 ? `0${hours}` : hours;\r\n    outputFieldsArr[2].textContent = mins < 10 ? `0${mins}` : mins;\r\n    outputFieldsArr[3].textContent = secs < 10 ? `0${secs}` : secs;\r\n\r\n    // const secField = document.querySelector('[data-value=\"secs\"]');\r\n    // const minsField = document.querySelector('[data-value=\"mins\"]');\r\n    // const hoursField = document.querySelector('[data-value=\"hours\"]');\r\n    // const daysField = document.querySelector('[data-value=\"days\"]');\r\n\r\n    // secField.textContent = secs < 10 ? `0${secs}` : secs;\r\n    // minsField.textContent = mins < 10 ? `0${mins}` : mins;\r\n    // hoursField.textContent = hours < 10 ? `0${hours}` : hours;\r\n    // daysField.textContent = days < 10 ? `0${days}` : days;\r\n  }\r\n\r\n  runTimer() {\r\n    const timerEl = document.querySelector(this.selector);\r\n    timerEl.insertAdjacentHTML(\r\n      \"beforebegin\",\r\n      \"<h1 class=timer-title lang = ru>До конца лета осталось:</h1>\"\r\n    );\r\n\r\n    setInterval(this.timer.bind(this), 1000);\r\n  }\r\n}\r\n\r\nconst createTimer = new CountdownTimer(\"#timer-1\", new Date(\"Sep 01, 2021\"));\r\n\r\ncreateTimer.runTimer();\r\n\r\n// =============================================\r\n// const targetDate = new Date(\"Sep 01, 2021\");\r\n\r\n// const outputFieldCall = (units) => {\r\n//   const fieldsValue = document.querySelectorAll(\".value\");\r\n\r\n//   [...fieldsValue].map((field) => {\r\n//     if (\r\n//       field.getAttribute(\"data-value\") === units &&\r\n//       field.classList.contains(`js-${units}`) !== true\r\n//     ) {\r\n//       field.classList.add(`js-${units}`);\r\n//     }\r\n//   });\r\n//   return document.querySelector(`.js-${units}`);\r\n// };\r\n\r\n// const timer = () => {\r\n//   const time = targetDate - new Date();\r\n\r\n//   const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n//   console.log(time);\r\n\r\n//   const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n//   const hours = Math.floor((time % (60 * 60 * 24 * 1000)) / (1000 * 60 * 60));\r\n\r\n//   const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n//   const secField = outputFieldCall(\"secs\");\r\n//   const minsField = outputFieldCall(\"mins\");\r\n//   const hoursField = outputFieldCall(\"hours\");\r\n//   const daysField = outputFieldCall(\"days\");\r\n\r\n//   secField.textContent = secs < 10 ? `0${secs}` : secs;\r\n//   minsField.textContent = mins < 10 ? `0${mins}` : mins;\r\n//   hoursField.textContent = hours < 10 ? `0${hours}` : hours;\r\n//   daysField.textContent = days < 10 ? `0${days}` : days;\r\n// };\r\n\r\n// const runTimer = () => {\r\n//   setInterval(timer, 1000);\r\n// };\r\n\r\n// runTimer(targetDate);\r\n// =============================================\r\n"]}